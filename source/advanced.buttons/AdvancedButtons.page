Menu="Buttons:1"
Cond="(pgrep('docker')!==false)"
Link="nav-user"
---
<?
$plugin = "advanced.buttons";
?>
<style type="text/css">
  .dupdate{color: #0088CC;}

  .pluginShadowBox
  {
    font-family:bitstream;
    font-size:10px;
    color:#505050;
    margin:8px 8px;
    padding:0;
    height: 600px;
    overflow-y: scroll;
  }
  .restore{color:#F39C12;}
  .save{color:#2DB3B8;}
</style>
<script type="text/javascript" src="/plugins/<?=$plugin;?>/assets/arrive.min.js"></script>
<script type="text/javascript">
  var dashboard = $.inArray( $("body").prop("class") , ["page_dashboard"]) !== -1;
  var AdvancedButtons        = new Object;
  AdvancedButtons.Startable  = [];
  AdvancedButtons.Stoppable  = [];
  AdvancedButtons.Updatable  = [];
  AdvancedButtons.Orphaned   = [];
  AdvancedButtons.Unnamed    = [];
  AdvancedButtons.ForceAll   = [];
  AdvancedButtons.Saved      = [];
  AdvancedButtons.Title      = [];
  AdvancedButtons.Content    = [];
  AdvancedButtons.Plugin     = [];
  AdvancedButtons.Docker     = [];
  AdvancedButtons.PluginsAll = [];
  AdvancedButtons.PluginsUp  = [];
  AdvancedButtons.PluginUpdating = null;
  AdvancedButtons.Target     = null;
  AdvancedButtons.Url        = "/plugins/<?=$plugin;?>/AdvancedButtons.php";

  var buttonOutput  = "";
  var icon_target = dashboard ? "Apps" : "Docker Containers";
  var icon_on = "<a class='tooltip-advanced-toggle {class}' style='cursor:pointer;margin-right:6px;' onclick='{cmd};' title='{title}'><i class='fa {icon}'></i></a>";
  var icon_off = "<a class='tooltip-advanced-toggle' style='color:"+$("body").css("color")+";margin-right:6px;'><i class='fa {icon}'></i></a>";

  $(function()
  {
    getABDockerStatus("Docker");
    getABPluginStatus("Plugin");

    AdvancedButtons.Target = dashboard ? $("div[id='apps_icons'] > div[class~='Panel']:last").next() : 
                                         $("#docker_containers").siblings("input[value='Check for Updates']");

    if (AdvancedButtons.Target.length)
    {
      $.post(AdvancedButtons.Url,{action:'get_content'}, function(data)
      {
        $.each(data, function( k, v )
        {
          AdvancedButtons[k] = v;
        });
        var ntop = $("span.status").offset().top;

        disable = (Object.keys(AdvancedButtons.Startable).length && ! AdvancedButtons.DockerRunning) ? "started" : "disabled";
        buttonOutput += "<button class='AdvancedButtons' onclick='dockerButtonCommand(\"start\");' "+disable+">";
        buttonOutput += "<i class='fa fa-play "+disable+"'>&nbsp;&nbsp;</i>Start All Containers</button>";
        icon = (disable == "started") ? icon_on.formatUnicorn({class:"started", cmd:"dockerButtonCommand(\"start\");", title:"Start All Containers", icon:"fa-play"}) : 
                                        icon_off.formatUnicorn({icon:"fa-play"}) ;
        $("#" + addButtonTab(icon, icon_target, true, true)).css("margin-right","150px").offset({top:ntop});

        disable = (Object.keys(AdvancedButtons.Stoppable).length && ! AdvancedButtons.DockerRunning) ? "stopped" : "disabled";
        buttonOutput += "<button class='AdvancedButtons' onclick='dockerButtonCommand(\"stop\");' "+disable+">";
        buttonOutput += "<i class='fa fa-square "+disable+"'>&nbsp;&nbsp;</i>Stop All Containers</button>";
        icon = (disable == "stopped") ? icon_on.formatUnicorn({class:"stopped", cmd:"dockerButtonCommand(\"stop\");", title:"Stop All Containers", icon:"fa-square"}) : 
                                        icon_off.formatUnicorn({icon:"fa-square"}) ;
        $("#" + addButtonTab(icon, icon_target, true, true)).offset({top:ntop});

        disable = (Object.keys(AdvancedButtons.Updatable).length && ! AdvancedButtons.DockerRunning) ? "dupdate" : "disabled";
        buttonOutput += "<button class='AdvancedButtons' onclick='dockerButtonCommand(\"update\");' "+disable+">";
        buttonOutput += "<i class='fa fa-cloud-download "+disable+"'>&nbsp;&nbsp;</i>Install All Updates</button>";
        icon = (disable == "dupdate") ? icon_on.formatUnicorn({class:"dupdate", cmd:"dockerButtonCommand(\"update\");", title:"Install All Updates", icon:"fa-cloud-download"}) : 
                                        icon_off.formatUnicorn({icon:"fa-cloud-download"}) ;
        $("#" + addButtonTab(icon, icon_target, true, true)).offset({top:ntop});

        if (! dashboard)
        {
          advanced = $.cookie("docker_listview_mode") == "advanced" ? "inline-block" : "none";

          diff_old = $(AdvancedButtons.Saved).not(AdvancedButtons.ForceAll).get();
          diff_new = diff_old.concat($(AdvancedButtons.ForceAll).not(AdvancedButtons.Saved).get());

          disable = (Object.keys(AdvancedButtons.Saved).length && ! AdvancedButtons.DockerRunning && diff_old.length) ? "restore" : "disabled";
          buttonOutput += "<button class='AdvancedButtons RestoreContainerState advanced' style='display:"+advanced+";' onclick='dockerButtonCommand(\"restore_containers\");' "+disable+">";
          buttonOutput += "<i class='fa fa-undo "+disable+"'>&nbsp;&nbsp;</i>Restore Previous Containers</button>";
          icon = (disable == "restore") ? icon_on.formatUnicorn({class:"restore", cmd:"dockerButtonCommand(\"restore_containers\");", title:"Restore Removed Containers", icon:"fa-undo"}) : 
                                          icon_off.formatUnicorn({icon:"fa-undo"}) ;
          $("#" + addButtonTab(icon, icon_target, true, true)).offset({top:ntop});

          disable = (Object.keys(AdvancedButtons.ForceAll).length && ! AdvancedButtons.DockerRunning && diff_new.length) ? "save" : "disabled";
          buttonOutput += "<button class='AdvancedButtons SaveContainerState advanced' style='display:"+advanced+";' onclick='dockerButtonSave(this);' "+disable+">";
          buttonOutput += "<i class='fa fa-floppy-o "+disable+"'>&nbsp;&nbsp;</i>Save Current Containers</button>";
          icon = (disable == "save") ? icon_on.formatUnicorn({class:"save", cmd:"dockerButtonSave(this);", title:"Save Container&#39;s List", icon:"fa-floppy-o"}) : 
                                          icon_off.formatUnicorn({icon:"fa-floppy-o"}) ;
          $("#" + addButtonTab(icon, icon_target, true, true)).offset({top:ntop});

          disable = (Object.keys(AdvancedButtons.Unnamed).length && ! AdvancedButtons.DockerRunning) ? "stopped" : "disabled";
          buttonOutput += "<button class='AdvancedButtons advanced' style='display:"+advanced+";' onclick='dockerButtonCommand(\"remove_unnamed\");' "+disable+">";
          buttonOutput += "<i class='fa fa-remove "+disable+"'>&nbsp;&nbsp;</i>Remove Unnamed Containers</button>";

          disable = (! AdvancedButtons.DockerRunning) ? "dupdate" : "disabled";
          buttonOutput += "<button class='AdvancedButtons advanced' style='display:"+advanced+";' onclick='dockerButtonCommand(\"update_all_containers\");' "+disable+">";
          buttonOutput += "<i class='fa fa-cloud-download "+disable+"'>&nbsp;&nbsp;</i>Force All Updates</button>";
          
          disable = (Object.keys(AdvancedButtons.Orphaned).length && ! AdvancedButtons.DockerRunning) ? "stopped" : "disabled";
          buttonOutput += "<button class='AdvancedButtons advanced' style='display:"+advanced+";' onclick='dockerButtonCommand(\"remove_orphaned\");' "+disable+">";
          buttonOutput += "<i class='fa fa-remove "+disable+"'>&nbsp;&nbsp;</i>Remove Orphaned Images</button>";
        }
        else
        {
          buttonOutput = "<div>"+buttonOutput+"</div>";
        }
        
        AdvancedButtons.Target.after(buttonOutput);  

      },"json");
    }

    // Bind Plugins Table
    var plugin_table = $("#plugin_table");
    if (plugin_table.length)
    {
      $.post(AdvancedButtons.Url,{action:'get_content'}, function(data)
      {
        $.each(data, function( k, v )
        {
          AdvancedButtons[k] = v;
        });
      },"json");
      buttonOutput  = "<span class='status vhshift'><button id='UpdateAllPlugins' style='margin-left:7px;' ";
      buttonOutput += "onclick='pluginsUpdate(\"update\",AdvancedButtons.PluginsUp);' disabled>";
      buttonOutput += "<i class='fa fa-cloud-download' disabled>&nbsp;&nbsp;</i>Update All Plugins</button></span>";
      $(".tabs").append(buttonOutput);

      plugin_table.arrive("tr",{onceOnly:false},function()
      {
        tr = $(this);
        id = tr.find("td > input[type='button'][value$='pdate']").prop("id");
        if ( id )
        {
          plg = id.slice(0, -6) + ".plg";
          AdvancedButtons.PluginsAll.pushUnique(plg);
        }
        if ( tr.find("span.red-text").length )
        {
          if (plg.length )
          {
            AdvancedButtons.PluginsUp.pushUnique(plg);

            $("#UpdateAllPlugins").attr("disabled",false).find("i").addClass("dupdate");   
          }
        }

        update = tr.find("input[type='button'][value$='pdate']");
        if (update.length)
        {
          update.attr("onclick", "disableElement(this); pluginsUpdate('update', '" + update.prop("id").slice(0, -6) + ".plg');" );
        }
        remove = tr.find("input[type='button'][value$='emove']");
        if (remove.length)
        {
          remove.attr("onclick", "disableElement(this); pluginsUpdate('remove', '" + remove.prop("id").slice(0, -6) + ".plg');" );
        }

      });
    };

    // Scroll down ShadowBox when open 
    $(document).arrive("div#pluginShadowBox",{onceOnly:false},function(){$(this).scrollLock().animate({ scrollTop:$(this).height()+300 }, "fast");});

    // Docker context functions
    fnStart   = function(e){e.preventDefault();dockerButtonCommand('start',   $(this).parents("ul").attr("id").replace("dropdown-context-", ""));};
    fnStop    = function(e){e.preventDefault();dockerButtonCommand('stop',    $(this).parents("ul").attr("id").replace("dropdown-context-", ""));};
    fnRestart = function(e){e.preventDefault();dockerButtonCommand('restart', $(this).parents("ul").attr("id").replace("dropdown-context-", ""));};
    fnUpdate  = function(e){e.preventDefault();dockerButtonCommand('update',  $(this).parents("ul").attr("id").replace("dropdown-context-", ""));};

    // Bind Docker context menus
    $(document).arrive("ul[id*='dropdown-context'] li > a[id^='event-']", function()
    {
      id = $(this).prop("id");

      switch($(this).text().trim())
      {
        case 'Start':   $(document).off('click', "#" + id); $(document).on("click", "#"+id, fnStart);   break;
        case 'Stop':    $(document).off('click', "#" + id); $(document).on("click", "#"+id, fnStop);    break;
        case 'Restart': $(document).off('click', "#" + id); $(document).on("click", "#"+id, fnRestart); break;
        case 'Update':  $(document).off('click', "#" + id); $(document).on("click", "#"+id, fnUpdate);  break;
        default:;
      }
    });

    // Bind Update link in Docker
    $("td.updatecolumn > a.exec").add("td.updatecolumn > div.advanced > a.exec").each(function()
    {
      fnUplink = function(){dockerButtonCommand('update', $(this).closest("tr").find("td > div[id^='context-']").prop("id").split("-")[1])};
      $(this).prop("onclick",null).off().on("click",fnUplink);
    });

    // Replace plugin_intall form submission
    $("form[name='plugin_install']").on("submit", function(e, o)
    {
      e.preventDefault();
      plugin = $(this).find("#plugin_file").val().trim();
      if (plugin.length)
      {
        disableElement($(this).find('*'));
        pluginsUpdate('install', plugin);
      }
      return false;
    });

    // Bind plugin_install to the new routine
    $("form[name='plugin_install'] > input[type='Button']").prop('onclick',null).off().on("click", function()
    {
      $("form[name='plugin_install']").submit();
    });

    // Bind Plugin checkall button
    $(document).arrive("input[type='button'][onclick*='arg1=checkall']", function()
    {
      $(this).prop("onclick",null).on("click", function(){disableElement(this);pluginsUpdate('check',AdvancedButtons["PluginsAll"])});
    });


    // // Add Clear All Cookies to Tools
    // if (document.location.pathname == "/Tools" )
    // {
    //   titlebar = $("div#title > span.left"    ).filter(function(){return $(this).text() === "WebGUI";}).parent();
    //   if (titlebar.prop("nodeName") == "DIV")
    //   {
    //     element  = '<div class="Panel"><a style="cursor:pointer" onclick="eraseAllCookies()"><img class="PanelImg" src="/webGui/images/default.png">'
    //     element += '<br><div class="PanelText">Clear All Cookies</div></a></div>';
    //     titlebar.nextUntil( "div#title" ).last().after(element);
    //   }
    // }


  });

  Array.prototype.pushUnique = function(element)
  {
    if (this.indexOf(element) === -1) {
      this.push(element);
    }
  };


  function dockerButtonSave(el)
  {
    $(".AdvancedButtons").attr("disabled", true).find("i").removeClass("dupdate started stopped");
    $.post(AdvancedButtons.Url, {action:"save_status"}, function(data)
    {
      $.jGrowl("Current Containers saved.", {
        glue:   'after',
        closeTemplate: '',
        life : 2000,
        sticky: false,
        theme: 'default',
        header: "Saving Current Containers",
        close: function(){location.reload();},
        beforeOpen: function(e){e.removeClass("ui-state-highlight");},
        afterOpen:  function(e){e.siblings(':first').after(e);},
      });
    });
  }

  function dockerButtonUnnamed(el)
  {
    $(el).attr("disabled", true);
    dockerButtonsAlert("Removing Unnamed Containers","Please wait while removing Docker unnamed containers...");
    $.post(AdvancedButtons.Url, {action:"remove_container", "container[]":AdvancedButtons.Unnamed}, function()
    {
      swal.close();
      location.reload();
    });
  }

  function dockerButtonOrphan(el)
  {
    $(el).attr("disabled", true);
    dockerButtonsAlert("Removing Orphaned Images","Please wait while removing Docker orphaned images...");
    $.post(AdvancedButtons.Url, {action:"remove_image", "image[]":AdvancedButtons.Orphaned}, function()
    {
      swal.close();
      location.reload();
    });
  }

  function enableElement(el)
  {
    if (typeof(el) === "undefined")
    {
      el = $(".abDisabled");
    }
    $(el).prop("disabled", false).removeClass("abDisabled");
  }

  function disableElement(el)
  {
    $(el).prop("disabled", true).addClass("abDisabled");
  }


  function getABDockerStatus(type)
  {
    clearTimeout(timers["get_docker_status"]);

    $.post(AdvancedButtons.Url, {action:"get_docker_status"}).always(function(data)
    {
      try
      {
        data = JSON.parse(data);
      }
      catch(err)
      {
        data = [];
      }

      if (data.title)
      {
        if ( typeof(AdvancedButtons["Docker"]["TitleTarget"]) === "undefined" || ( ! $(AdvancedButtons["Docker"]["TitleTarget"]).length && ! AdvancedButtons["Docker"]["Dismiss"] ) )
        {
          $.jGrowl(data.message+"<br>"+data.status, {
            glue:   'after',
            theme:  'default',
            sticky: true,
            header: data.title,
            group:  "docker_buttons_theme",
            beforeOpen:  function(e){e.removeClass("ui-state-highlight"); return !$('div.jGrowl-notify').hasClass("docker_buttons_theme");},
            afterOpen:   function(e){e.siblings(':first').after(e);},
            beforeClose: function(e){$.post(AdvancedButtons.Url, {action:'remove_status',"scope":"docker"}); AdvancedButtons["Docker"]["Dismiss"] = true;},
          });
          AdvancedButtons["Docker"]["TitleTarget"]   = 'div.jGrowl-notify.docker_buttons_theme > div.jGrowl-header';
          AdvancedButtons["Docker"]["StatusTarget"]  = 'div.jGrowl-notify.docker_buttons_theme > div.jGrowl-message';
        }
        $( AdvancedButtons["Docker"]["TitleTarget"] ).html( data.title );
        $( AdvancedButtons["Docker"]["StatusTarget"] ).html( data.message+"<br>"+data.status );
      }

      if (data.type == "reload" )
      { 
        var closeFunction = function(reload) {
          $('div.jGrowl-notify.docker_buttons_theme > div.jGrowl-message' ).html("Reloading...");
          target_parent = $('div.jGrowl-notify.docker_buttons_theme > div.jGrowl-message').parent().remove();
          $.post(AdvancedButtons.Url, {action:'remove_status',"scope":"docker"}, function(){ if(reload) location.reload();});
        };
        reload = false;
        if(AdvancedButtons.Target.length)
        {
          reload = true;
        }
        setTimeout(closeFunction, 1000, reload);
      }
      else
      {
        timeout = (data.type == "static" || data.type == "stopped") ? 5000 : 300;
        // timeout = (data.type == "reload") ? 50000 : timeout;
        timers["get_docker_status"] = setTimeout(getABDockerStatus, timeout);    
      }
    });
  }


  function getABPluginStatus()
  {
    clearTimeout(timers["get_plugin_status"]);

    $.post(AdvancedButtons.Url, {action:"get_plugin_status"}).always(function(data)
    {
      try
      {
        data = JSON.parse(data);
      }
      catch(err)
      {
        data = [];
      }

      if (data.title)
      {
        if ( typeof(AdvancedButtons.Plugin.TitleTarget) === "undefined" || ( ! $(AdvancedButtons.Plugin.TitleTarget).length && ! AdvancedButtons.Plugin.Dismiss ) )
        {
          $.jGrowl(data.message+"<br>"+data.status, {
            glue:   'after',
            theme:  'default',
            sticky: true,
            header: data.title,
            group:  "plugin_buttons_theme",
            beforeOpen:  function(e)
            {
              e.removeClass("ui-state-highlight");
              e.find(".jGrowl-header ~ div").css("cursor", "pointer").on("click", function()
              {
                AdvancedButtons.Plugin.TitleTarget   = "#sb-title-inner";
                AdvancedButtons.Plugin.StatusTarget  = null;
                AdvancedButtons.Plugin.ContentTarget = "#sb-player";
                Shadowbox.open(
                {
                  content:"<div id='pluginShadowBox' class='pluginShadowBox'>" + AdvancedButtons.Plugin.Content + "</div>",
                  player:'html',
                  title:AdvancedButtons["Plugin"]["Title"],
                  height:600,
                  width:900,
                  options:
                  {
                    modal:true,
                    onClose:function(){AdvancedButtons.Plugin.TitleTarget = "";AdvancedButtons.Plugin.Dismiss = false; getABPluginStatus();},
                  }
                });
                e.trigger('jGrowl.close');
              });
              return !$('div.jGrowl-notify').hasClass("plugin_buttons_theme");
            },
            afterOpen:   function(e){e.siblings(':first').after(e);},
            beforeClose: function(e){$.post(AdvancedButtons.Url, {action:'remove_status',"scope":"plugin"}); AdvancedButtons.Plugin.Dismiss = true;},
          });

          AdvancedButtons.Plugin.TitleTarget   = 'div.jGrowl-notify.plugin_buttons_theme > div.jGrowl-header';
          AdvancedButtons.Plugin.StatusTarget  = 'div.jGrowl-notify.plugin_buttons_theme > div.jGrowl-message';
          AdvancedButtons.Plugin.ContentTarget = null;
        }
        AdvancedButtons.Plugin.Title    = data.title;
        AdvancedButtons.Plugin.Status   = data.message+"<br>"+data.status;
        AdvancedButtons.Plugin.Content  = data.content.replace(/(?:\r\n|\r|\n)/g, '<br />');
        AdvancedButtons.Plugin.Content += "<p style='text-align:center;'><button class='logLine' type='button' onclick='top.Shadowbox.close()'>Background</button></p>";

        $( AdvancedButtons.Plugin.TitleTarget  ).html( AdvancedButtons.Plugin.Title );
        $( AdvancedButtons.Plugin.StatusTarget ).html( AdvancedButtons.Plugin.Status );
        
        iFrameBody = $( AdvancedButtons.Plugin.ContentTarget );
        if (iFrameBody.length )
        {
          targetDiv = iFrameBody.find("div#pluginShadowBox");
          if (! targetDiv.length )
          {
            targetDiv = iFrameBody.append("<div id='pluginShadowBox' class='pluginShadowBox'></div>");
          }
          if (AdvancedButtons.Plugin.Content != AdvancedButtons.Plugin.OldContent)
          {
            targetDiv.html( AdvancedButtons.Plugin.Content );
            targetDiv.animate({ scrollTop:targetDiv.height()+300 }, "fast");
            AdvancedButtons.Plugin.OldContent = AdvancedButtons.Plugin.Content;
          }
        }
      }

      if (data.type == "reload")
      { 
        var closeFunction = function(reload)
        {
          if (reload)
          {
            target_parent = $('div.jGrowl-notify.plugin_buttons_theme > div.jGrowl-message');
          }
          $.post(AdvancedButtons.Url, {action:'remove_status',"scope":"plugin",disable_reload:true}, function()
          { 
            if(reload)
            {
              wait  = "<tr><td></td><td colspan='4' style='text-align:center;'><br><i class='fa fa-spinner fa-spin icon'></i>";
              wait += "<em>Please wait, retrieving plugin information ...</em></td><td></td><tr>";
              $('#plugin_list').html(wait);
              $.get('/plugins/dynamix.plugin.manager/include/ShowPlugins.php',{stale:''}).always(function(data)
              {
                if (data)
                {
                  $('#plugin_list').html(data);
                  $('.desc_readmore').readmore({maxHeight:58});
                  $("#plugin_table").trigger("update",[true]);
                }
                enableElement();
                $( AdvancedButtons.Plugin.StatusTarget ).html( AdvancedButtons.Plugin.Status );
              });
            }
          }
        )};
        reload = false;
        if($("#plugin_table").length)
        {
          $('div.jGrowl-notify.plugin_buttons_theme > div.jGrowl-message' ).html("Reloading...");
          reload = true;
        }
        setTimeout(closeFunction, 700, reload);
      }
      else
      {
        timeout = (data.type == "static" || data.type == "stopped") ? 5000 : 300;
        timers.get_plugin_status = setTimeout(getABPluginStatus, timeout);    
      }
    });
  }


  function dockerButtonCommand(command, target)
  {
    target = (typeof(target) !== "undefined") ? [target] : null;

    Opts = new Object;
    $(".AdvancedButtons").attr("disabled", true).find("i").removeClass("dupdate started stopped");

    switch(command)
    {
      case 'start': 
        containers = target ? target : AdvancedButtons.Startable;
        Opts = {action:"start", "container[]":containers};
        break;

      case 'stop':
        containers = target ? target : AdvancedButtons.Stoppable;
        Opts = {action:"stop", "container[]":containers};
        break;

      case 'restart':
        containers = target ? target : AdvancedButtons.Stoppable;
        Opts = {action:"restart", "container[]":containers};
        break;

      case 'update':
        containers = target ? target : AdvancedButtons.Updatable;
        Opts = {action:"update_containers", "container[]":containers};
        break;

      case 'update_all_containers':
        containers = target ? target : AdvancedButtons.ForceAll;
        Opts = {action:"update_containers", "container[]":containers};
        break;

      case 'remove_unnamed':
        containers = target ? target : AdvancedButtons.Unnamed;
        Opts = {action:"remove_container", "container[]":containers};
        break;

      case 'remove_orphaned':
        images = target ? target : AdvancedButtons.Orphaned;
        Opts = {action:"remove_image", "image[]":images};
        break;

      case 'restore_containers':
        containers = target ? target : AdvancedButtons.Saved;
        Opts = {action:"restore_containers", "container[]":containers};
        break;

    }

    AdvancedButtons["Docker"]["Dismiss"] = false;
    $.post(AdvancedButtons.Url, Opts, function(data)
    {
      getABDockerStatus();
    });
  }

  function pluginsUpdate(method, plugin)
  {
    plugins = (typeof(plugin) === "object") ? plugin : [ plugin ];
    $("#UpdateAllPlugins").prop("disabled", true);

    $.post(AdvancedButtons.Url, {action:"plugin_update", "plugin[]":plugins, method:method}, function(data)
    {
      AdvancedButtons["Plugin"]["Dismiss"] = false;
      getABPluginStatus();
    });
  }

function get_tab_title_by_name(name) {
  var tab    = $("input[name$=tabs] + label").filter(function(){return $(this).text() === name;}).prev();
  var title  = $("div#title > span.left"    ).filter(function(){return $(this).text() === name;}).parent();
  if (tab.length) {
    return tab
  } else if (title.length) {
    return title
  } else {
    return $(document)
  }
}


function addButtonTab(Button, Name, autoHide, Append)
{
  if (typeof(autoHide) == "undefined") autoHide = true;
  if (typeof(Append)   == "undefined") Append   = true;

  var Target    = get_tab_title_by_name(Name);
  var elementId = 'event-' + new Date().getTime() * Math.floor(Math.random()*100000);
  var element   = $("<span id='"+elementId+"' class='status' style='padding-left:5px;'>"+Button+"</span>");
  
  if (element.find("input[type='button']").length)
  {
    element.addClass("vhshift");
    element.find("input[type='button']").prop("style","padding-top: 5px; padding-bottom: 5px;");
  }

  if (Target.prop('nodeName') === "DIV")
  {
    if (Append)
    {
      Target.append(element);
    }
    else
    {
      Target.prepend(element);
    }
    return elementId;
  }
  else if (Target.prop('nodeName') === "INPUT")
  {
    element.css("display","none");

    if (Append)
    {
      $('.tabs').append(element);
    }
    else
    {
      $('.tabs').prepend(element);
    }

    Target.bind({click:function(){$('#'+elementId).fadeIn('slow');}});

    if (Target.is(':checked') || ! autoHide) {
      $('#'+elementId).fadeIn('slow');
    }

    $("input[name$=tabs]").each(function()
    {
      if (! $(this).is(Target) && autoHide )
      {
        $(this).bind({click:function(){$('#'+elementId).fadeOut('slow');}});
      }
    });
    return elementId;
  }
  else
  {
    return false;
  }
}

String.prototype.formatUnicorn = String.prototype.formatUnicorn ||
function () {
    "use strict";
    var str = this.toString();
    if (arguments.length) {
        var t = typeof arguments[0];
        var key;
        var args = ("string" === t || "number" === t) ?
            Array.prototype.slice.call(arguments)
            : arguments[0];

        for (key in args) {
            str = str.replace(new RegExp("\\{" + key + "\\}", "gi"), args[key]);
        }
    }

    return str;
};

$('body').on('mouseenter', '.tooltip-advanced:not(.tooltipstered), .tooltip-advanced-toggle:not(.tooltipstered)', function()
{
  onClose = {click:true, scroll:true, mouseleave:true, tap:true};
  if ( $(this).hasClass("tooltip-advanced-toggle") )
  {
    onClose.click = false;
  }
  $(this).tooltipster(
  {
    delay:100,
    zIndex:100,
    trigger:'custom',
    triggerOpen:{mouseenter:true, touchstart:true},
    triggerClose:onClose,
  }).tooltipster('open');
});

</script>