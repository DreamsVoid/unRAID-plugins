Menu="Buttons:1"
Cond="(pgrep('docker')!==false)"
Link="nav-user"
---
<?
$plugin = "docker.buttons";
?>
<style type="text/css">
  .dupdate{color: #0088CC;}
</style>
<script type="text/javascript" src="/plugins/<?=$plugin;?>/assets/arrive.min.js"></script>
<script type="text/javascript">
  var DockerButtons = new Object;
  DockerButtons['Startable'] = [];
  DockerButtons['Stoppable'] = [];
  DockerButtons['Updatable'] = [];
  DockerButtons['Orphaned']  = [];
  DockerButtons['Unnamed']   = [];
  DockerButtons['ForceAll']  = [];
  var PluginsUpdatable = [];
  var buttonOutput = "";
  var DBUrl        = "/plugins/<?=$plugin;?>/DockerButtons.php";
  new Image().src  = "/plugins/<?=$plugin;?>/images/loading.gif";

  $(function()
  {
    var target1 = $("#docker_containers").siblings("input[value='Check for Updates']");
    var target2 = $("div[id='apps_icons'] > div[class~='Panel']:last").next();
    if (target1.length)
    {
      target = target1;
    }
    else
    {
      target    = target2;
      dashboard = true;
    }

    if (target.length)
    {
      $.post(DBUrl,{action:'get_content'}, function(data)
      {
        DockerButtons = data;
        disable = Object.keys(DockerButtons.Startable).length ? "started" : "disabled";
        buttonOutput += "<button onclick='dockerButtonStart(this);' "+disable+"><i class='fa fa-play "+disable+"'>&nbsp;&nbsp;</i>Start All Containers</button>";

        disable = Object.keys(DockerButtons.Stoppable ).length ? "stopped" : "disabled";
        buttonOutput += "<button onclick='dockerButtonStop(this);' "+disable+"><i class='fa fa-square "+disable+"'>&nbsp;&nbsp;</i>Stop All Containers</button>";

        disable = Object.keys(DockerButtons.Updatable).length ? "dupdate" : "disabled";
        buttonOutput += "<button onclick='dockerButtonUpdate(this,false);' "+disable+"><i class='fa fa-cloud-download "+disable+"'>&nbsp;&nbsp;</i>Install Available Updates</button>";

        if (typeof(dashboard) === 'undefined')
        {
          advanced = $.cookie("docker_listview_mode") == "advanced" ? "inline-block" : "none";
          
          disable = Object.keys(DockerButtons.Unnamed).length ? "stopped" : "disabled";
          buttonOutput += "<button class='advanced' style='display:"+advanced+";' onclick='dockerButtonUnnamed(this);' "+disable+">";
          buttonOutput += "<i class='fa fa-remove "+disable+"'>&nbsp;&nbsp;</i>Remove Unnamed Containers</button>";

          buttonOutput += "<button class='advanced' style='display:"+advanced+";' onclick='dockerButtonUpdate(this,true);'>";
          buttonOutput += "<i class='fa fa-cloud-download dupdate'>&nbsp;&nbsp;</i>Force Update All Containers</button>";
          
          disable = Object.keys(DockerButtons.Orphaned).length ? "stopped" : "disabled";
          buttonOutput += "<button class='advanced' style='display:"+advanced+";' onclick='dockerButtonOrphan(this);' "+disable+">";
          buttonOutput += "<i class='fa fa-remove "+disable+"'>&nbsp;&nbsp;</i>Remove Orphaned Images</button>";
        }
        else
        {
          buttonOutput = "<div>"+buttonOutput+"</div>";
        }
        
        target.after(buttonOutput);
      },"json");
    }

    // Plugins
    var plugin_table = $("#plugin_table");
    if (plugin_table.length)
    {
      buttonOutput  = "<span class='status vhshift'><button id='UpdateAllPlugins' style='margin-left:7px;' onclick='pluginsUpdate();' disabled>";
      buttonOutput += "<i class='fa fa-cloud-download' disabled>&nbsp;&nbsp;</i>Update All Plugins</button></span>";
      $(".tabs").append(buttonOutput);

      plugin_table.arrive("tr", function() {
        if ( $(this).find("span.red-text").length )
        {
          regex = /=([\w|.]*plg)/g;
          var plg = regex.exec( $(this).find("td input[type='button']").attr('onclick') );
          if (plg.length)
          {
            PluginsUpdatable.push(plg[1]);
            $("#UpdateAllPlugins").attr("disabled",false).find("i").addClass("dupdate");   
          }
        }
      });
    };

  });



  function dockerButtonsAlert(title,desc,imageUrl,imageSize, outsideClick, showCancel, showConfirm, alertType)
  {
    if (typeof(imageUrl)     === "undefined") imageUrl     = "/plugins/<?=$plugin;?>/images/loading.gif";
    if (typeof(outsideClick) === "undefined") outsideClick = false;
    if (typeof(showCancel)   === "undefined") showCancel   = false;
    if (typeof(showConfirm)  === "undefined") showConfirm  = false;
    if (typeof(showConfirm)  === "undefined") showConfirm  = false;
    if (typeof(imageSize)    === "undefined") imageSize    = "80x80";
    swal({
      title: title,
      text: desc,
      imageUrl: imageUrl,
      imageSize: imageSize,
      allowOutsideClick: outsideClick,
      showConfirmButton: showConfirm,
      showCancelButton: showCancel,
      type: alertType,
      html: true
    });
  }


  function dockerButtonUpdate(el,force)
  {
    $(el).attr("disabled", true);
    Updates = (force) ? DockerButtons.ForceAll : DockerButtons.Updatable;
    dockerButtonsAlert("Updating Containers","Please wait while updating Docker containers...");
    $.get("/plugins/dynamix.docker.manager/include/CreateDocker.php",{updateContainer: true, "ct[]": Updates}).always(function(){location.reload();});
  }


  function dockerButtonUpdate2(el,force)
  {
    $(el).attr("disabled", true);
    Updates = (force) ? DockerButtons.ForceAll : DockerButtons.Updatable;  
    var last_response_len = false;

    $.ajax({
      async: true,
      data: {action: "update", "container[]": Updates},
      // processData: false,
      success: function(xml){
          console.log(xml);
      },
      type: 'post',
      url: DBUrl,
      xhr: function(){
          // get the native XmlHttpRequest object
          var xhr = $.ajaxSettings.xhr() ;
          // set the onprogress event handler
          xhr.onprogress = function(evt){ 
            var this_response, response = evt.currentTarget.response;
            if(last_response_len === false)
            {
              this_response = response;
              last_response_len = response.length;
            }
            else
            {
              this_response = response.substring(last_response_len);
              last_response_len = response.length;
            }

            if (this_response.length )
            {
              $.each(this_response.split('\n'), function(i,v){
                try { 
                  console.log( JSON.parse(v.trim()) );
                }
                catch(err) {
                  return;
                }
              });
            }
          } ;
          // set the onload event handler
          xhr.onload = function(){ console.log('DONE!') } ;
          // return the customized object
          return xhr ;
        }
    });
  }
  

  function dockerButtonStart(el)
  {
    $(el).attr("disabled", true);
    dockerButtonsAlert("Starting Containers","Please wait while starting Docker containers...");
    $.post(DBUrl, {action:"start", "container[]":DockerButtons.Startable}, function()
    {
      swal.close();
      location.reload();
    });
  }

  function dockerButtonStop(el)
  {
    $(el).attr("disabled", true);
    dockerButtonsAlert("Stopping Containers","Please wait while stopping Docker containers...");
    $.post(DBUrl, {action:"stop", "container[]":DockerButtons.Stoppable}, function()
    {
      swal.close();
      location.reload();
    });
  }

  function dockerButtonUnnamed(el)
  {
    $(el).attr("disabled", true);
    dockerButtonsAlert("Removing Unnamed Containers","Please wait while removing Docker unnamed containers...");
    $.post(DBUrl, {action:"remove_container", "container[]":DockerButtons.Unnamed}, function()
    {
      swal.close();
      location.reload();
    });
  }

  function dockerButtonOrphan(el)
  {
    $(el).attr("disabled", true);
    dockerButtonsAlert("Removing Orphaned Images","Please wait while removing Docker orphaned images...");
    $.post(DBUrl, {action:"remove_image", "image[]":DockerButtons.Orphaned}, function()
    {
      swal.close();
      location.reload();
    });
  }

  function pluginsUpdate(el)
  {
    $(el).attr("disabled", true);
    var url = DBUrl + "?action=plugin_update";
    $.each(PluginsUpdatable, function(i,v)
    {
      url = url + "&plugin[]=" + v;
    });
    openBox(url,"Update Plugins",600,900,true);
  }

</script>