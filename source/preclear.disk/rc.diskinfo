#!/usr/bin/php
<?php
declare(ticks = 1);
set_time_limit(0);

##############################
######  ERROR HANDLING  ######
##############################
set_error_handler("log_error");
set_exception_handler( "log_exception" );

##############################
######  DEAMON SECTION  ######
##############################
$debug = FALSE;
$version = "0.1.0";

$prog      = pathinfo(__FILE__, PATHINFO_BASENAME);
$prog_name = "Disk Info Daemon";
$lockfile  = "/var/run/${prog}.pid";
$log_file  = '/var/log/diskinfo.log';
$service   = __FILE__;
openlog("$prog", LOG_PID | LOG_PERROR, LOG_LOCAL0);
pcntl_signal(SIGHUP, "force_reload");

$usage = <<<EOF

${prog_name}:

Usage: $prog [options]

  -d  --daemon     run in the background
  -v, --verbose    print all messages
      --debug      turn on debugging
      --help       display this help and exit
  -q  --quit       stop daemon if running
  -l  --refresh    refresh disk info
  -r  --restart    restart daemon
  -s  --status     status of the daemon
      --version    output version information and exit


EOF;

$shortopts = 'dfqlvrs';
$longopts = [
    'daemon',
    'debug',
    'help',
    'quit',
    'refresh',
    'verbose',
    'version',
    'restart',
    'status'
];
$args = getopt($shortopts, $longopts);

if (array_key_exists('help', $args)) {
    echo $usage.PHP_EOL;
    exit(0);
}

if (array_key_exists('version', $args)) {
    echo "${prog_name} - ${version}".PHP_EOL;
    exit(0);
}

$verbose = (array_key_exists('v', $args) || array_key_exists('verbose', $args));
$debug   = (array_key_exists('debug', $args));
$daemon  = (array_key_exists('d', $args) || array_key_exists('daemon',  $args));
$quit    = (array_key_exists('q', $args) || array_key_exists('quit',    $args));
$refresh = (array_key_exists('l', $args) || array_key_exists('refresh', $args));
$restart = (array_key_exists('r', $args) || array_key_exists('restart', $args));
$status  = (array_key_exists('r', $args) || array_key_exists('status' , $args));

if (file_exists($lockfile))
{
  $lock_pid    = file($lockfile, FILE_IGNORE_NEW_LINES)[0];
  $pid_running = preg_replace("/\s+/", "", shell_exec("ps -p $lock_pid | grep $lock_pid"));
  if ($pid_running)
  {
    if ($quit)
    {
      debug("Stopping ${prog_name}"); 
      syslog(LOG_INFO, "killing daemon with PID [$lock_pid]");
      exec("kill $lock_pid");
      unlink($lockfile);
      exit(0);
    }
    else if ($restart)
    {
      debug("Restarting ${prog_name}"); 
      syslog(LOG_INFO, "killing daemon with PID [$lock_pid]");
      exec("kill $lock_pid");
      unlink($lockfile);
      exec("php $service 1>/dev/null ".($debug ? "--debug":"2>&1 ")."&");
      while (true)
      {
        if (is_file($lockfile))
        {
          if (is_numeric(file_get_contents($lockfile)))
          {
            $new_pid = file_get_contents($lockfile);
            break;
          }
        }
        sleep(0.3);
      }
      closelog();
      openlog("${prog}[${new_pid}]", LOG_PERROR, LOG_LOCAL0);
      syslog(LOG_INFO, "process started. To terminate it, type: $prog --quit");
      exit(0);
    }
    else if($refresh)
    {
      posix_kill($lock_pid, SIGHUP);
      exit(0);
    }
    else if($status)
    {
      echo "running".PHP_EOL;
      exit(0);
    }
    else
    {
      echo "$prog is already running [$lock_pid]".PHP_EOL;
      exit(0);
    }
  }
  else
  {
    if ($quit || $restart)
    {
      echo "$lock_pid is not currently running".PHP_EOL;
      unlink($lockfile);
      exit(1);
    }
    else if ($refresh)
    {
      syslog(LOG_INFO, "process stopped, restarting");
      exec("php $service  1>/dev/null ".($debug ? "":"2>&1 ")."&");
      while (true)
      {
        if (is_file($lockfile))
        {
          if (is_numeric(file_get_contents($lockfile)))
          {
            $new_pid = file_get_contents($lockfile);
            break;
          }
        }
        sleep(0.3);
      }
      closelog();
      openlog("${prog}[${new_pid}]", LOG_PERROR, LOG_LOCAL0);
      syslog(LOG_INFO, "process started. To terminate it, type: $prog --quit");
      posix_kill($new_pid, SIGHUP);
      exit(0);
    }
    else if($status)
    {
      echo "stopped".PHP_EOL;
      exit(0);
    }
    else
    {
      file_put_contents($lockfile, getmypid());
    }
  }
}
else
{
  if ($quit ||  $restart)
  {
    echo "$prog not currently running".PHP_EOL;
    exit(1);
  }
  else if($status)
  {
    echo "stopped".PHP_EOL;
    exit(0);
  }
  else
  {
    file_put_contents($lockfile, getmypid());
  }
}

if ($daemon || $refresh)
{
  exec("php $service  1>/dev/null ".($debug ? "":"2>&1 ")."&");
  // exec("php $service ".($debug ? "--debug &":"&>/dev/null &"));
  // syslog(LOG_INFO, "process started. To terminate it, type: $prog --quit");
  exit(0);
}

##############################
###### FUNCTION SECTION ######
##############################

/* logger*/
function logger($msg, $quiet = false)
{
  syslog(LOG_INFO, $msg);
  if (!$quiet)
  {
    echo PHP_EOL.$msg.PHP_EOL;
  }
}

function log_error($errno, $errstr, $errfile, $errline)
{
  switch($errno){
    case E_ERROR:               $error = "Error";                          break;
    case E_WARNING:             $error = "Warning";                        break;
    case E_PARSE:               $error = "Parse Error";                    break;
    case E_NOTICE:              $error = "Notice";                 return; break;
    case E_CORE_ERROR:          $error = "Core Error";                     break;
    case E_CORE_WARNING:        $error = "Core Warning";                   break;
    case E_COMPILE_ERROR:       $error = "Compile Error";                  break;
    case E_COMPILE_WARNING:     $error = "Compile Warning";                break;
    case E_USER_ERROR:          $error = "User Error";                     break;
    case E_USER_WARNING:        $error = "User Warning";                   break;
    case E_USER_NOTICE:         $error = "User Notice";                    break;
    case E_STRICT:              $error = "Strict Notice";                  break;
    case E_RECOVERABLE_ERROR:   $error = "Recoverable Error";              break;
    default:                    $error = "Unknown error ($errno)"; return; break;
  }
  debug("PHP {$error}: $errstr in {$errfile} on line {$errline}", "ERROR");
}

function log_exception( $e )
{
  debug("PHP Exception: {$e->getMessage()} in {$e->getFile()} on line {$e->getLine()}", "ERROR");
}

function debug($msg, $type = "NOTICE")
{
  global $prog, $debug;
  if ( $type == "DEBUG" && ! $GLOBALS["debug"] )
  {
    return NULL;
  }
  
  $msg_date = "\n".date("D M j G:i:s T Y").": ".print_r($msg,true);

  file_put_contents($GLOBALS["log_file"], $msg_date, FILE_APPEND);
  if ($debug)
  {
    $STDERR = fopen('php://stderr', 'w+');
    fwrite($STDERR, $msg.PHP_EOL);
    fclose($STDERR);
  }
  if ($type == "ERROR")
  {
    syslog(LOG_ERR, $msg);
  }
}

class Misc
{

  public static function save_json($file, $content)
  {
    file_put_contents($file, json_encode($content, JSON_PRETTY_PRINT ));
  }


  public static function get_json($file)
  {
    return file_exists($file) ? @json_decode(file_get_contents($file), true) : [];
  }


  public static function disk_device($disk)
  {
    $disk = (file_exists($disk)) ? $disk : "/dev/${disk}";
    return file_exists($disk) ? $disk : null;
  }


  public static function disk_name($disk)
  {
    return basename($disk);
  }


  public static function array_first_element($arr)
  {
    return (is_array($arr) && count($arr)) ? $arr[0] : $arr;
  }
}


class Disks
{
  function __construct()
  {
    global $VERBOSE;
    $this->verbose    = $VERBOSE;
    $this->smartdir   = "/var/local/emhttp/smart";
    $this->cache      = "/var/local/emhttp/plugins/diskinfo/diskinfo.json";
    $this->interval   = 900; // Refresh interval in seconds
    $this->exec_time  = 60; // Max execution time in seconds

    $this->get_unraid_config();
    $this->get_disks();
  }

  public function get_unraid_config()
  {
    $this->unraid = [];

    // Make sure paths exist
    if (! is_dir(dirname($this->cache)))
    {
      @mkdir(dirname($this->cache),0775);
    }

    // Get array disks
    if (is_file("/var/local/emhttp/disks.ini"))
    {
      $disksIni = parse_ini_file("/var/local/emhttp/disks.ini", true);
      $this->unraid = array_values(array_filter(array_map(function($disk){return $disk['device'];}, $disksIni)));
    }

    // exec("timeout -s 9 ". $this->exec_time ." /usr/bin/strings /boot/config/super.dat 2>/dev/null|grep -Po '.{6,}'", $serials);
    // exec("timeout -s 9 ". $this->exec_time ." udevadm info --query=property --name /dev/disk/by-label/UNRAID 2>/dev/null|grep -Po 'ID_SERIAL=\K.*'", $flash_serial);
    
    // $disks_cfg = is_file("/boot/config/disk.cfg") ? parse_ini_file("/boot/config/disk.cfg") : [];
    // $cache_serial = array_flip(preg_grep("#cacheId#i", array_flip($disks_cfg)));

    // exec("timeout -s 9 ". $this->exec_time ." /bin/lsblk -nbP -o name,type,serial 2>/dev/null", $blocks);
    // foreach( array_merge($serials,$cache_serial,$flash_serial) as $serial )
    // {
    //   if (strlen($serial))
    //   {
    //     foreach ($blocks as $block)
    //     {
    //       $block  = parse_ini_string(preg_replace('$"\s$', '"'.PHP_EOL, $block)) ?: [];
    //       if ( $block['TYPE'] == "disk" && strlen($block['SERIAL']) && ! is_bool(strpos($serial, $block['SERIAL'])) )
    //       {
    //         $this->unraid[] = $block['NAME'];
    //       }
    //     }
    //   }
    // }
    $this->unraid = array_unique($this->unraid);
  }


  public function get_disks()
  {
    $this->all        = [];
    $this->assigned   = [];
    $this->unassigned = [];
    $this->partitions = [];

    // Get all disks and define those which are unassigned
    exec("timeout -s 9 ". $this->exec_time ." /bin/lsblk -nbP -o name,type,size,mountpoint,fstype,label 2>/dev/null", $blocks);

    foreach ($blocks as $b)
    {
      $block  = parse_ini_string(preg_replace('$"\s(\w+[=])$', '"'.PHP_EOL.'${1}', $b)) ?: [];
      $device = "/dev/${block['NAME']}";
      if ($block['TYPE'] == "disk" && file_exists($device))
      {
        $attrs = @parse_ini_string(shell_exec("timeout -s 9 ". $this->exec_time ." udevadm info --query=property --name ${device} 2>/dev/null")) ?: [];
        $block['SERIAL'] = isset($attrs["ID_SCSI_SERIAL"]) ? $attrs["ID_SCSI_SERIAL"] : $attrs['ID_SERIAL_SHORT'];

        $this->all[$block['NAME']] = $block;

        if ( in_array($block['NAME'], $this->unraid))
        {
          $this->assigned[$block['NAME']] = $block;
        }
        else
        {
          $this->unassigned[$block['NAME']] = $block;
        }
        
      }
      elseif ($block['TYPE'] == "part") 
      {
        $disk = (is_bool(strpos($block['NAME'], "nvme"))) ? preg_replace("#\d+$#", "", $block['NAME']) : preg_replace("#p\d+$#", "", $block['NAME']);
        $this->partitions[$disk][$block['NAME']] = $block;
      }
    }
  }


  public function unassigned_disks_info($force)
  {
    $disks = [];

    // Get cached info from file
    $cache = Misc::get_json($this->cache);

    if ($force)
    {
      $GLOBALS["reload_force"] = false;
      $cache = [];
    }

    foreach ($this->unassigned as $key => $disk)
    {
      $disk = $this->get_info($disk["NAME"], $cache, $force);
      $disks[$key] = $disk;
    }

    foreach ($this->assigned as $disk)
    {
      unset($disks[$disk["NAME"]]);
    }

    if (! $GLOBALS["reload_force"])
    {
      Misc::save_json($this->cache, $disks);
    }

    return $disks;
  }


  public function get_info($device, &$cache, $force)
  {
    $device = Misc::disk_device($device);
    if (! $device)
    {
      return [];
    }
    $name       = Misc::disk_name($device);
    $smart_file = $this->smartdir . "/${name}";
    $whitelist  = array("ID_MODEL", "DEVPATH", "ID_SCSI_SERIAL", "ID_SERIAL_SHORT", "ID_FS_LABEL", "ID_VENDOR", "ID_MODEL");

    // SMART parser function
    $parse_smart = function($smart, $property) 
    {
      $value = trim(explode(":", array_values(preg_grep("#$property#", $smart))[0])[1]);
      return ($value) ? $value : "n/a";
    };

    // Get current info
    $current = $this->all[$name];

    $disk = isset($cache[$name]) ? $cache[$name] : $current;

    // Trigger reload if current and cached serials mismatch
    if (count($current) && isset($disk["SERIAL_SHORT"]))
    {
      $reload = ( strpos(trim($current["SERIAL"]), trim($disk["SERIAL_SHORT"])) !== -1 ) ? false : true;
    }
    else
    {
      $reload = false;
    }

    // Probe persistent disk data if data isn't cached or reload triggered
    if (! isset($cache[$name]) || $reload || $force)
    {
      debug("Probing disk ${device} info...", "DEBUG");

      // Get info using UDEV subsystem
      $udev = trim($this->benchmark("shell_exec", "timeout -s 9 ". $this->exec_time ." udevadm info --query=property --name ${device} 2>/dev/null"));
      $udev = parse_ini_string($udev);
      $disk = array_intersect_key($udev, array_flip($whitelist));

      $disk['SERIAL_SHORT'] = isset($disk["ID_SCSI_SERIAL"]) ? $disk["ID_SCSI_SERIAL"] : $disk['ID_SERIAL_SHORT'];
      $disk['SERIAL']       = trim("{$disk[ID_MODEL]}_{$disk[SERIAL_SHORT]}");

      // Get device BUS
      $disk["BUS"] = (stripos($disk["DEVPATH"], "usb") !== -1) ? "usb" : "ata";
      unset($disk["DEVPATH"]);

      // Get SMART device type from cached info or get it using get_smart_type function
      $disk["SMART"] = $disk["SMART"] ? $disk["SMART"] : $this->get_smart_type($device);

      // Probe SMART data
      $smartInfo = explode(PHP_EOL, $this->benchmark("shell_exec", "timeout -s 9 ". $this->exec_time ." smartctl --info --attributes ${disk['SMART']} '${device}' 2>/dev/null"));
      $disk['FAMILY']   = $parse_smart($smartInfo, "Model Family");
      $disk['MODEL']    = $parse_smart($smartInfo, "Device Model");

      if ($disk['FAMILY'] == "n/a" && $disk['MODEL'] == "n/a" )
      {
        $vendor         = $parse_smart($smartInfo, "Vendor");
        $product        = $parse_smart($smartInfo, "Product");
        $revision       = $parse_smart($smartInfo, "Revision");
        $disk['FAMILY'] = "{$vendor} {$product}";
        $disk['MODEL']  = "{$vendor} {$product} - Rev. {$revision}";
      }

      $disk['FIRMWARE'] = $parse_smart($smartInfo, "Firmware Version");
      $disk['SIZE']     = $current["SIZE"];
      $disk['SIZE_H']   = trim(shell_exec("numfmt --to=si --suffix=B --format='%1.f' --round=nearest ${disk['SIZE']} 2>/dev/null"));
      $disk['SIZE_H']   = preg_replace("/(^\d+)(.*)/", "$1 $2", $disk['SIZE_H']);
      $disk["DEVICE"]   = $device;
      $smartInfo = implode(PHP_EOL, $smartInfo);
      file_put_contents($smart_file, $smartInfo);
    }

    // Refreshing partition info 
    $disk["PARTS"] = is_array($this->partitions[$name]) ? $this->partitions[$name] : [];

    // 
    foreach ($disk["PARTS"] as $key => $value)
    {
      $part = &$disk["PARTS"][$key];
      $part["DEVICE"] = "/dev/${part['NAME']}";
      if (strlen($part['MOUNTPOINT']))
      {
        $part['USED'] = intval(trim($this->benchmark("shell_exec", "df --exclude-type=devtmpfs --block-size=1 --output=used,source ${part['DEVICE']} 2>/dev/null|tail -n +2|awk '{print $1}'")));
        $part['OPENFILES'] = trim($this->benchmark("shell_exec", "lsof +L -Fk '${part['MOUNTPOINT']}' 2>/dev/null | wc -l"));
      }
      else
      {
        $part['USED'] = 0;
        $part['OPENFILES'] = 0;
      }
    }

    // Is it mounted?
    $disk['MOUNTED'] = array_reduce($disk['PARTS'], function ($found, $partition) { return $found || strlen($partition['MOUNTPOINT']) > 0; }, false);
    
    // Probe for temperature and power state if interval timed out
    if (file_exists($smart_file) && $disk["TIMESTAMP"] > 0)
    {
      $use_file = (time() - filemtime($smart_file)) < $this->interval;
    }

    $timeout = (time() - $disk["TIMESTAMP"]) > $this->interval;

    if ( $timeout )
    {
      debug("Timeout reached.", "DEBUG");

      if (! isset($smartInfo))
      {
        if ($use_file)
        {
          debug("Using existing smart file.", "DEBUG");
          $smartInfo = file_get_contents($smart_file);
        }
        else
        {
          $smartInfo = trim($this->benchmark("shell_exec", "timeout -s 9 ". $this->exec_time ." smartctl --nocheck=standby --attributes ${disk['SMART']} ${device} 2>/dev/null"));
          file_put_contents($smart_file, $smartInfo);
        }
      }

      $disk["RUNNING"]   = preg_match("/Device is in STANDBY mode/", $smartInfo) ? false : true;
      $disk["TIMESTAMP"] = $disk["RUNNING"] ? time() : 0;
      $disk["TEMP"]      = trim(shell_exec("echo -e \"$smartInfo\" | grep -m 1 -i Temperature_Celsius | awk '{print $10}'"));
      if (! is_numeric($disk["TEMP"]))
      {
        $disk["TEMP"]    = trim(shell_exec("echo -e \"$smartInfo\" | grep -m 1 -i Airflow_Temperature | awk '{print $10}'"));
      }
      $disk["NAME"]      = $name;
    }

    // Detect precleared disk
    if (count($disk["PARTS"]) && $disk["RUNNING"] && ! isset($disk["PRECLEAR"]) )
    {
      $disk["PRECLEAR"] = $this->verify_precleared($device);
    }
    else if (! isset($disk["PRECLEAR"]))
    {
      $disk["PRECLEAR"] = false;
    }

    return $disk;
  }


  public function get_smart_type($device)
  {
    $device  = Misc::disk_device($device);
    $cache   = Misc::get_json($this->cache);
    $types_1 = [ "-d auto", "-d sat,auto", "-d scsi", "-d ata", "-d sat,12", "-d usbjmicron", "-d usbjmicron,0", "-d usbjmicron,1" ]; 
    $types_2 = [ "-x -d usbjmicron,x,0", "-x -d usbjmicron,x,1", "-d usbsunplus", "-d usbcypress", "-d sat -T permissive" ];
    $smart   = isset($cache[$device]['SMART']) ? $cache[$device]['SMART'] : null;

    if ( ! $smart )
    {
      debug("SMART parameters for drive [{$device}] not found, probing...", "NOTICE");
      $smart = "none";
      foreach (array_merge($types_1, $types_2) as $type)
      {
        debug("Trying SMART parameter ($type) for disk [{$device}]...", "NOTICE");
        $out  = $this->benchmark("shell_exec", "timeout -s 9 ". $this->exec_time ." smartctl --info --attributes {$type} '{$device}' 2>/dev/null");
        $info = trim(shell_exec("echo -e \"${out}\" | grep -v '\[No Information Found\]' | grep -c -e 'Vendor:' -e 'Product:' -e 'Serial Number:' -e 'Device Model:'"));
        $attr = trim(shell_exec("echo -e \"${out}\" | grep -c 'ATTRIBUTE_NAME'"));

        // SMART info and attributes present
        if ( intval($info) > 0 && intval($attr) > 0 )
        {
          $smart = $type;
          debug("SMART parameter for disk [{$device}] ($smart) found.", "NOTICE");
          break;
        }

        // SMART info only
        else if ( $info > 0 )
        {
          $smart = $type;
          debug("Partial SMART parameter for disk [{$device}] ($smart) found.", "NOTICE");
        }
      }
      $cache[$device]['SMART'] = $smart;
    }
    return $smart;
  }


  public function benchmark()
  {
    $params   = func_get_args();
    $function = $params[0];
    array_shift($params);
    $time     = -microtime(true); 
    $out      = call_user_func_array($function, $params);
    $time    += microtime(true); 
    $type     = ($time > 10) ? "INFO" : "DEBUG";
    debug("benchmark: $function(".implode(",", $params).") took ".sprintf('%f', $time)."s.", $type);
    return $out;
  }


  public function verify_precleared($dev) {
    $dev            = Misc::disk_device($dev);
    $cleared        = TRUE;
    $disk_blocks    = intval(trim(shell_exec("/sbin/blockdev --getsz $dev  | /bin/awk '{ print $1 }'")));
    $max_mbr_blocks = hexdec("0xFFFFFFFF");
    $over_mbr_size  = ( $disk_blocks >= $max_mbr_blocks ) ? TRUE : FALSE;
    $pattern        = $over_mbr_size ? array("00000", "00000", "00002", "00000", "00000", "00255", "00255", "00255") : 
                       array("00000", "00000", "00000", "00000", "00000", "00000", "00000", "00000");

    $b["mbr1"] = trim(shell_exec("/usr/bin/dd bs=446 count=1 if=$dev 2>/dev/null        |sum|/bin/awk '{print $1}'"));
    $b["mbr2"] = trim(shell_exec("/usr/bin/dd bs=1 count=48 skip=462 if=$dev 2>/dev/null|sum|/bin/awk '{print $1}'"));
    $b["mbr3"] = trim(shell_exec("/usr/bin/dd bs=1 count=1  skip=450 if=$dev 2>/dev/null|sum|/bin/awk '{print $1}'"));
    $b["mbr4"] = trim(shell_exec("/usr/bin/dd bs=1 count=1  skip=511 if=$dev 2>/dev/null|sum|/bin/awk '{print $1}'"));
    $b["mbr5"] = trim(shell_exec("/usr/bin/dd bs=1 count=1  skip=510 if=$dev 2>/dev/null|sum|/bin/awk '{print $1}'"));

    foreach (range(0,15) as $n) {
      $b["byte{$n}"] = trim(shell_exec("/usr/bin/dd bs=1 count=1 skip=".(446+$n)." if=$dev 2>/dev/null|sum|/bin/awk '{print $1}'"));
      $b["byte{$n}h"] = sprintf("%02x",$b["byte{$n}"]);
    }

    debug("Verifying '$dev' for preclear signature.", "DEBUG");

    if ( $b["mbr1"] != "00000" || $b["mbr2"] != "00000" || $b["mbr3"] != "00000" || $b["mbr4"] != "00170" || $b["mbr5"] != "00085" ) {
      debug("Failed test 1: MBR signature not valid.", "DEBUG"); 
      $cleared = FALSE;
    }
    # verify signature
    foreach ($pattern as $key => $value) {
      if ($b["byte{$key}"] != $value) {
        debug("Failed test 2: signature pattern $key ['$value'] != '".$b["byte{$key}"]."'", "DEBUG");
        $cleared = FALSE;
      }
    }
    $sc = hexdec("0x{$b[byte11h]}{$b[byte10h]}{$b[byte9h]}{$b[byte8h]}");
    $sl = hexdec("0x{$b[byte15h]}{$b[byte14h]}{$b[byte13h]}{$b[byte12h]}");
    switch ($sc) {
      case 63:
      case 64:
        $partition_size = $disk_blocks - $sc;
        break;
      case 1:
        if ( ! $over_mbr_size) {
          debug("Failed test 3: start sector ($sc) is invalid.", "DEBUG");
          $cleared = FALSE;
        }
        $partition_size = $max_mbr_blocks;
        break;
      default:
        debug("Failed test 4: start sector ($sc) is invalid.", "DEBUG");
        $cleared = FALSE;
        break;
    }
    if ( $partition_size != $sl ) {
      debug("Failed test 5: disk size doesn't match.", "DEBUG");
      $cleared = FALSE;
    }
    return $cleared;
  }
}



function force_reload($sig, $signum = false)
{
  if (! $GLOBALS["reload_force"])
  {
    syslog(LOG_INFO, "SIGHUP received, forcing refresh of disks info.");
    $GLOBALS["reload_force"] = true;
  }
  else
  {
    syslog(LOG_INFO, "SIGHUP ignored - already refreshing disk info.");
    $GLOBALS["reload_force"] = true; 
  }
}

function isTimeout(&$counter, $timeout)
{
  $current = time();
  $counter = $counter ? $counter : time();
  if ( ($current - $counter) >= $timeout  )
  {
    $counter = null;
    return true;
  }
  return false;
}


##############################
#####  PROGRAM SECTION  ######
##############################
$Disks        = new Disks;
$reload_force = false;
$counter      = 0;

while(TRUE)
{
  while(TRUE)
  { ####  DO YOUR STUFF HERE  ####

    if (isTimeout($counter, 30))
    {
      $Disks->get_unraid_config();
    }

    $Disks->get_disks();
    $Disks->unassigned_disks_info($reload_force);
    sleep(1);

    ######  END OF SECTION  ######
  };
};
?>