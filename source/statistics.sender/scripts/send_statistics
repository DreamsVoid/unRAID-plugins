#!/usr/bin/env php
<?PHP
$plugin = "statistics.sender";

function getCURLError($error)
{
  $errs = [
    1 => "Unsupported protocol. This build of curl has no support for this protocol.",
    2 => "Failed to initialize.",
    3 => "URL malformat. The syntax was not correct.",
    4 => "URL user malformatted. The user-part of the URL syntax was not correct.",
    5 => "Couldn’t resolve proxy. The given proxy host could not be resolved.",
    6 => "Couldn’t resolve host. The given remote host was not resolved.",
    7 => "Failed to connect to host.",
    8 => "FTP weird server reply. The server sent data curl couldn’t parse.",
    9 => "FTP access denied. The server denied login.",
    10 => "FTP user/password incorrect. Either one or both were not accepted by the server.",
    11 => "FTP weird PASS reply. Curl couldn’t parse the reply sent to the PASS request.",
    12 => "FTP weird USER reply. Curl couldn’t parse the reply sent to the USER request.",
    13 => "FTP weird PASV reply, Curl couldn’t parse the reply sent to the PASV request.",
    14 => "FTP weird 227 format. Curl couldn’t parse the 227-line the server sent.",
    15 => "FTP can’t get host. Couldn’t resolve the host IP we got in the 227-line.",
    16 => "FTP can’t reconnect. Couldn’t connect to the host we got in the 227-line.",
    17 => "FTP couldn’t set binary. Couldn’t change transfer method to binary.",
    18 => "Partial file. Only a part of the file was transfered.",
    19 => "FTP couldn’t download/access the given file, the RETR (or similar) command failed.",
    20 => "FTP write error. The transfer was reported bad by the server.",
    21 => "FTP quote error. A quote command returned error from the server.",
    22 => "HTTP page not retrieved. The requested url was not found or returned another error with the HTTP error code being 400 or above.",
    23 => "Write error. Curl couldn’t write data to a local filesystem or similar.",
    24 => "Malformed user. User name badly specified.",
    25 => "FTP couldn’t STOR file. The server denied the STOR operation, used for FTP uploading.",
    26 => "Read error. Various reading problems.",
    27 => "Out of memory. A memory allocation request failed.",
    28 => "Operation timeout. The specified time-out period was reached according to the conditions.",
    29 => "FTP couldn’t set ASCII. The server returned an unknown reply.",
    30 => "FTP PORT failed. The PORT command failed. Not all FTP servers support the PORT command, try doing a transfer using PASV instead!",
    31 => "FTP couldn’t use REST. The REST command failed. This command is used for resumed FTP transfers.",
    32 => "FTP couldn’t use SIZE. The SIZE command failed. The command is an extension to the original FTP spec RFC 959.",
    33 => "HTTP range error. The range 'command' didn’t work.",
    34 => "HTTP post error. Internal post-request generation error.",
    35 => "SSL connect error. The SSL handshaking failed.",
    36 => "FTP bad download resume. Couldn’t continue an earlier aborted download.",
    37 => "FILE couldn’t read file. Failed to open the file. Permissions?",
    38 => "LDAP cannot bind. LDAP bind operation failed.",
    39 => "LDAP search failed.",
    40 => "Library not found. The LDAP library was not found.",
    41 => "Function not found. A required LDAP function was not found.",
    42 => "Aborted by callback. An application told curl to abort the operation.",
    43 => "Internal error. A function was called with a bad parameter.",
    44 => "Internal error. A function was called in a bad order.",
    45 => "Interface error. A specified outgoing interface could not be used.",
    46 => "Bad password entered. An error was signaled when the password was entered.",
    47 => "Too many redirects. When following redirects, curl hit the maximum amount.",
    48 => "Unknown TELNET option specified.",
    49 => "Malformed telnet option.",
    51 => "The remote peer’s SSL certificate wasn’t ok",
    52 => "The server didn’t reply anything, which here is considered an error.",
    53 => "SSL crypto engine not found",
    54 => "Cannot set SSL crypto engine as default",
    55 => "Failed sending network data",
    56 => "Failure in receiving network data",
    57 => "Share is in use (internal error)",
    58 => "Problem with the local certificate",
    59 => "Couldn’t use specified SSL cipher",
    60 => "Problem with the CA cert (path? permission?)",
    61 => "Unrecognized transfer encoding",
    62 => "Invalid LDAP URL",
    63 => "Maximum file size exceeded"
  ];
  return $errs[intval($error)];
}

// function isAnonymized($url = Null)
// {
//   global $plugin;
//   $myip     = trim(shell_exec("curl -s http://whatismyip.akamai.com 2>/dev/null"));
//   $torip    = trim(shell_exec("curl -s --socks5-hostname 127.0.0.1:9050 http://whatismyip.akamai.com 2>/dev/null"));
//   $diffip   = ($myip != $torip);
//   if ($url)
//   {
//     // $resp = trim(shell_exec("ping -c 1 ".escapeshellarg($url)." &> /dev/null; echo $?"));  
//     $resp = trim(shell_exec("curl -sSf --socks5-hostname 127.0.0.1:9050 ".escapeshellarg($url)." &> /dev/null; echo $?"));
//     if ($resp == "0" && $diffip)
//     {
//       shell_exec("echo 'my ip = $myip'|logger -t'${plugin}'");
//       shell_exec("echo 'tor ip = $torip'|logger -t'${plugin}'");
//       shell_exec("echo 'host [${url}] reachable'|logger -t'${plugin}'");
//       shell_exec("echo 'successfully established anonymous connection'|logger -t'${plugin}'");
//       return true;
//     }
//     else
//     {
//       shell_exec("echo 'host [${url}] not reachable'|logger -t'${plugin}'");
//       shell_exec("anonymous connection failed.|logger -t'${plugin}'");
//       return false;
//     }
//   }
//   else
//   {
//     if ($diffip)
//     {
//       shell_exec("echo my ip = $myip|logger -t'${plugin}'");
//       shell_exec("echo tor ip = $torip|logger -t'${plugin}'");
//       shell_exec("successfully established anonymous connection|logger -t'${plugin}'");
//       return true;
//     }
//     else
//     {
//       shell_exec("anonymous connection failed.|logger -t'${plugin}'");
//       return false;
//     }
//   }
// }


$file   = $argv[1];

$report = @parse_ini_file($file,true) ?: [];

if (array_key_exists("report", $report))
{
  $url = $report["report"]["url"];
  $host = preg_replace("#^([\w]+://[^/]*).*#", "$1", $url);

  // // Start TOR
  // shell_exec("/etc/rc.d/rc.tor start 2>&1");

  // // Try 5 times to establish an anonymous connection through tor
  // $anonymized = false;
  // for ($i=0; $i < 5; $i++) { 
  //   if (isAnonymized($host))
  //   {
  //     $anonymized = true;
  //     break;
  //   }
  //   else
  //   {
  //     shell_exec("restarting tor...|logger -t'${plugin}'");
  //     shell_exec("/etc/rc.d/rc.tor restart 2>&1");
  //   }
  //   sleep(1);
  // }

  // if (! $anonymized)
  // {
  //   shell_exec("an anonymous connection couldn't be established, aborting...|logger -t'${plugin}'");
  //   echo json_encode(["success"=>false,"output"=>"An anonymous connection couldn't be established, aborting..."]);
  //   // Stop TOR
  //   shell_exec("/etc/rc.d/rc.tor stop 2>&1");
  //   exit();
  // }

  unset($report["report"]);
  // $cmd = "curl -s --socks5-hostname 127.0.0.1:9050 ".escapeshellarg($url)." -d ifq";
  $cmd = "curl -s ".escapeshellarg($url)." -d ifq";
  foreach ($report as $key => $value)
  {
    $arg = str_replace("^n", "\n", $value['value']);
    $arg = urlencode($value['entry'])."=".urlencode($arg);
    $cmd .= " -d ".escapeshellarg($arg);
  }

  shell_exec("echo sending report:{$report['report']['title']}|logger -t'${plugin}'");
  exec($cmd, $out, $exit_code);
  if ($exit_code === 0)
  {
    shell_exec("echo report sent.|logger -t'${plugin}'");
    echo json_encode(["success"=>true]);
    $new = str_replace(".dismiss", "", $file);
    @rename($file,"${new}.sent");
  }
  else
  {
    shell_exec("echo send report failed.|logger -t'${plugin}'");
    echo json_encode(["success"=>false,"output"=>"Error code: ".getCURLError($exit_code)]);
  }

  // // Stop TOR
  // shell_exec("/etc/rc.d/rc.tor stop 2>&1");
}

?>